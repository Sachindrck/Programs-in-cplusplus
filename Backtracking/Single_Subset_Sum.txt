// Finds a(only one) subset whose sum is equal to given sum.
#include <iostream>

using namespace std;

bool solve(int arr[], int l, int n, int m, int sol[]);

bool findMaxSubsetSum(int arr[], int n, int m)  // wrapper function
{
    int sol[n] = {0};
    
    if (solve(arr, 0, n, m, sol) == false)
        return false;
        
    return true;
}

bool isSafe(int arr[], int i, int m)      // boundary function
{
    return (arr[i] <= m);
}

void print(int sol[], int n)             // to print solution
{
    for (int x = 0; x < n; x++) {
        if (sol[x] > 0)
            cout << sol[x] << " ";
    }
}

bool solve(int arr[], int l, int n, int m, int sol[])      // function to find subset sum
{
    if (m == 0) {
        print(sol, n);
        return true;
    }
    
    else {
        for (int i = l; i < n; i++) {
            if(isSafe(arr, i, m)) {
                sol[i] = arr[i];
                if (solve(arr, i+1, n, m-arr[i], sol) == true)
                    return true;
                sol[i] = 0;
            }
        }
    }
    return false;
}

// Driver code
int main()
{
    int arr[] = {5, 10, 12, 13, 15, 18};
    int n = 6;
    int m = 30;
    
    findMaxSubsetSum(arr, n, m);
    return 0;
}
