// BFS - Breadth First Traversal
#include <iostream>
#include <vector>
#include <queue>
#define V 7
using namespace std;

int c = 0;

void addEdge(vector<int> arr[], int u, int v)
{
    arr[u].push_back(v);
    arr[v].push_back(u);
}

void printAdjList(vector<int> arr[])
{
    for(int i = 0; i < V; i++) {
        cout << i << " : ";
        for (int u : arr[i]) {
            cout << " - " << u ;
        }
        cout << endl;
    }

}

// Given source vertex s and graph is connected
// Level Order Traversal
void BFS(vector<int> arr[], int s, bool visited[])
{
    c++;
    queue<int> q;
    cout << s << " ";
    q.push(s);
    visited[s] = true;

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (int v : arr[u]) {
            if (visited[v] == false) {
                cout << v << " ";
                visited[v] = true;
                q.push(v);
            }
        }
    }
}


// No source given an the graph may be disconnected
// Application in web crawling
void BFSDis(vector<int> arr[])
{
    bool visited[V+1];
    for (int i = 0; i < V; i++) {
        visited[i] = false;
    }

    for (int i = 0; i < V; i++) {
        if (visited[i] == false)
            BFS(arr, i, visited);
    }


}
int main()
{
    //Adjacency List
    vector<int> arr[V];

    addEdge(arr, 0, 1);
    addEdge(arr, 0, 2);
    addEdge(arr, 1, 3);
    addEdge(arr, 2, 3);
    addEdge(arr, 4, 5);
    addEdge(arr, 4, 6);
    addEdge(arr, 5, 6);

    // printAdjList(arr);

    BFSDis(arr);
    cout << "\nNo of Components of the graph - " << c;
    return 0;
}
